{"version":3,"sources":["cryptomonedas.png","components/Error.js","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MensajeError","styled","p","Error","mensaje","Label","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptomoneda","CoinInfo","Id","Name","FullName","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listacripto","guardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","async","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4f378ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color: #FFF;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\n\r\nconst Error = ({mensaje}) => {\r\n    return (  \r\n        <MensajeError>{mensaje}</MensajeError>\r\n    );\r\n}\r\n \r\nexport default Error;","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display:block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n\r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n\r\n    const Seleccionar = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={ e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">- Seleccione -</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    // Retornar state, interfaz y fn que modifica el state\r\n    return [state, Seleccionar, actualizarState];\r\n}\r\n\r\nexport default useMoneda;","import React, { Fragment, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\n\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display:block;\r\n    padding: 1rem;\r\n    -webkit-appearance: none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n\r\n    // console.log(opciones);\r\n\r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n\r\n    const SelectCripto = () => (\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={ e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">- Seleccione -</option>\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n\r\n    // Retornar state, interfaz y fn que modifica el state\r\n    return [state, SelectCripto, actualizarState];\r\n}\r\n\r\nexport default useCriptomoneda;","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nimport Error from './Error';\r\nimport useMoneda from '../hooks/useMoneda';\r\nimport useCriptomoneda from '../hooks/useCriptomoneda';\r\nimport axios from 'axios';\r\n\r\nconst Boton = styled.input`\r\n    margin-top: 20px;\r\n    font-weight: bold;\r\n    font-size: 20px;\r\n    padding: 10px;\r\n    background-color: #66a2fe;\r\n    border: none;\r\n    width: 100%;\r\n    border-radius: 10px;\r\n    color: #FFF;\r\n    transition: background-color .3s ease;\r\n\r\n    &:hover {\r\n        background-color: #326AC0;\r\n        cursor:pointer;\r\n    }\r\n`\r\n\r\nconst Formulario = ({guardarMoneda,  guardarCriptomoneda }) => {\r\n\r\n    // state del listado de criptomonedas\r\n    const [ listacripto, guardarCriptomonedas ] = useState([]);\r\n    const [ error, guardarError] = useState(false);\r\n\r\n    const MONEDAS = [\r\n        { codigo: 'USD', nombre: 'Dolar de Estados Unidos' },\r\n        { codigo: 'MXN', nombre: 'Peso Mexicano' },\r\n        { codigo: 'EUR', nombre: 'Euro' },\r\n        { codigo: 'GBP', nombre: 'Libra Esterlina' }\r\n    ];\r\n\r\n    // Utilizar useMoneda\r\n    const [ moneda, SelectMonedas ] = useMoneda('Elige tu Moneda', '', MONEDAS);\r\n\r\n    // utilizar useCriptomoneda\r\n    const [criptomoneda, SelectCripto] = useCriptomoneda('Elige tu Criptomoneda', '', listacripto);\r\n\r\n    // Ejecutar llamado a la API\r\n    useEffect(() => {\r\n        const consultarAPI = async () => {\r\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\r\n\r\n            const resultado = await axios.get(url);\r\n\r\n            guardarCriptomonedas(resultado.data.Data);\r\n        }\r\n        consultarAPI();\r\n    }, []);\r\n\r\n\r\n    // cuando el usuario hace submit\r\n    const cotizarMoneda = e => {\r\n        e.preventDefault();\r\n\r\n        // validar si ambos campos estan llenos\r\n        if(moneda === '' || criptomoneda === '') {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        // pasar los datos al componente principal\r\n        guardarError(false);\r\n        guardarMoneda(moneda);\r\n        guardarCriptomoneda(criptomoneda);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={cotizarMoneda}\r\n        >\r\n            {error ? <Error mensaje=\"Todos los campos son obligatorios\" /> : null}\r\n\r\n            <SelectMonedas />\r\n\r\n            <SelectCripto />\r\n\r\n            <Boton\r\n                type=\"submit\"\r\n                value=\"Calcular\"\r\n            />\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport styled from '@emotion/styled';\r\n\r\nconst ResultadoDiv = styled.div`\r\n    color: #FFF;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n`;\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n\r\n    span {\r\n        font-weight:bold;\r\n    }\r\n`\r\n\r\nconst Cotizacion = ({resultado}) => {\r\n    if(Object.keys(resultado).length === 0) return null;\r\n\r\n    console.log(resultado)\r\n\r\n    return ( \r\n        <ResultadoDiv>\r\n            <Precio>El precio es: <span>{resultado.PRICE}</span> </Precio>\r\n            <Info>Precio más alto del día: <span>{resultado.HIGHDAY}</span> </Info>\r\n            <Info>Precio más bajo del día: <span>{resultado.LOWDAY}</span> </Info>\r\n            <Info>Variación últimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span> </Info>\r\n            <Info>Última Actualización: <span>{resultado.LASTUPDATE}</span> </Info>\r\n        </ResultadoDiv>\r\n     );\r\n}\r\n \r\nexport default Cotizacion;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div class=\"sk-chase\">\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n            <div class=\"sk-chase-dot\"></div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, {useState, useEffect} from 'react';\r\nimport styled from '@emotion/styled';\r\nimport axios from 'axios';\r\nimport imagen from './cryptomonedas.png';\r\nimport Formulario from './components/Formulario';\r\nimport Cotizacion from './components/Cotizacion';\r\nimport Spinner from './components/Spinner';\r\n\r\nconst Contenedor = styled.div`\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  @media (min-width:992px) {\r\n    display: grid;\r\n    grid-template-columns: repeat(2, 1fr);\r\n    column-gap: 2rem;\r\n  }\r\n`;\r\n\r\nconst Imagen = styled.img`\r\n  max-width: 100%;\r\n  margin-top: 5rem;\r\n`;\r\nconst Heading = styled.h1`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color: #FFF;\r\n  text-align:left;\r\n  font-weight: 700;\r\n  font-size: 50px;\r\n  margin-bottom: 50px;\r\n  margin-top: 80px;\r\n\r\n  &::after {\r\n    content: '';\r\n    width: 100px;\r\n    height: 6px;\r\n    background-color: #66A2FE;\r\n    display:block;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n\r\n  const [moneda, guardarMoneda] = useState('');\r\n  const [criptomoneda, guardarCriptomoneda] = useState('');\r\n  const [resultado, guardarResultado] = useState({});\r\n  const [cargando, guardarCargando] = useState(false);\r\n\r\n  useEffect( () => {\r\n\r\n      const cotizarCriptomoneda = async () => {\r\n          // evitamos la ejecución la primera vez\r\n          if(moneda === '') return;\r\n\r\n          // consultar la api para obtener la cotizacion\r\n          const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\r\n\r\n          const resultado = await axios.get(url);\r\n\r\n          // mostrar el spinner\r\n          guardarCargando(true);\r\n\r\n          // ocultar el spinner y mostrar el resultado\r\n          setTimeout(() => {\r\n\r\n            // cambiar el estado de cargando\r\n            guardarCargando(false);\r\n\r\n            // guardar cotizacion\r\n            guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda] );\r\n          }, 3000);\r\n\r\n          \r\n      }\r\n      cotizarCriptomoneda();\r\n  }, [moneda, criptomoneda]);\r\n\r\n  // Mostrar spinner o resultado\r\n  const componente = (cargando) ? <Spinner /> :  <Cotizacion  resultado={resultado} />\r\n\r\n  return (\r\n    <Contenedor>\r\n        <div>\r\n          <Imagen \r\n            src={imagen}\r\n            alt=\"imagen cripto\"\r\n          />\r\n        </div>\r\n        <div>\r\n            <Heading>Cotiza Criptomonedas al Instante</Heading>\r\n\r\n            <Formulario \r\n              guardarMoneda={guardarMoneda}\r\n              guardarCriptomoneda={guardarCriptomoneda}\r\n            />\r\n\r\n            {componente}\r\n            \r\n        </div>\r\n    </Contenedor>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}